version: '3.9'

services:
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT} # Exposing PostgreSQL port to the host machine
    volumes:
      - ./postgres_data:/var/lib/postgresql/data  # Mount the volume to the container
      - ./api-service/postgresql/sql/up_v1.sql:/docker-entrypoint-initdb.d/up_v1.sql
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 30s
      retries: 3
      timeout: 10s
      start_period: 5s

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000" # S3-compatible API
      - "9001:9001" # MinIO Console (web UI)
    environment:
      MINIO_ROOT_USER:  ${MINIO_USER}        # MinIO access key
      MINIO_ROOT_PASSWORD:  ${MINIO_PASSWORD}   # MinIO secret key
    volumes:
      - ./minio_data:/data                   # Persist MinIO data on host
    command: server /data

  api-service:
    build: ./api-service
    ports:
      - "8080:8080"                           # Expose the API port
    depends_on:
      - minio
    environment:
      MINIO_ENDPOINT:  ${MINIO_ENDPOINT}   # Endpoint of MinIO in the compose setup
      MINIO_ACCESS_KEY: ${MINIO_USER}         # MinIO access key
      MINIO_SECRET_KEY: ${MINIO_PASSWORD}     # MinIO secret key
      AIRFLOW_USER: ${AIRFLOW_USER}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      HOST_DB:  ${HOST_DB}

  # # Optional: Your app container here
  # app:
  #   image: your-app-image
  #   container_name: your-app
  #   depends_on:
  #     - db
  #   networks:
  #     - postgres-network
  #   environment:
  #     DATABASE_URL: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}"



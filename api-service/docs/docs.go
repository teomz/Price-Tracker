// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/minio/deleteImage": {
            "delete": {
                "description": "Get a file from MinIO storage",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "minio"
                ],
                "summary": "Get a file from MinIO",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User calling api",
                        "name": "TaskUser",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The name of the minio bucket",
                        "name": "BucketNameKey",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The name of the object with extension in minio eg image.png",
                        "name": "ObjectNameKey",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/minio/getImage": {
            "get": {
                "description": "Get a file from MinIO storage",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "image/png",
                    "image/jpeg"
                ],
                "tags": [
                    "minio"
                ],
                "summary": "Get a file from MinIO",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User calling api",
                        "name": "TaskUser",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The name of the minio bucket",
                        "name": "BucketNameKey",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The name of the object with extension in minio eg image.png",
                        "name": "ObjectNameKey",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/minio/uploadImage": {
            "post": {
                "description": "Upload a file to MinIO storage",
                "consumes": [
                    "image/png",
                    "image/jpeg"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "minio"
                ],
                "summary": "Upload a file to MinIO",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User calling api",
                        "name": "TaskUser",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "File to be uploaded",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The name of the minio bucket",
                        "name": "BucketNameKey",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "File extension (e.g., png, jpeg)",
                        "name": "extension",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/postgresql/getAnalytics": {
            "get": {
                "description": "Return a table from the PostgreSQL database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "postgres"
                ],
                "summary": "get table",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User calling the API",
                        "name": "TaskUser",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "the table to query",
                        "name": "Table",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.QuerySuccessResponse-models_Analytics"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/postgresql/getInfoByDate": {
            "get": {
                "description": "Return an array of upc from the PostgreSQL database filtered by date",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "postgres"
                ],
                "summary": "get data by date",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User calling the API",
                        "name": "TaskUser",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.QuerySuccessResponse-string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/postgresql/getInfoByPublisher": {
            "get": {
                "description": "Return an array of upc from the PostgreSQL database filtered by date",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "postgres"
                ],
                "summary": "get data by date",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User calling the API",
                        "name": "TaskUser",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Publisher of item",
                        "name": "Publisher",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.QuerySuccessResponse-models_SaleUrls"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/postgresql/uploadInfo": {
            "post": {
                "description": "Upload an array of items (Omnibus) to the PostgreSQL database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "postgres"
                ],
                "summary": "Upload data to PostgreSQL",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"user123\"",
                        "description": "User calling the API",
                        "name": "TaskUser",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "",
                        "description": "use case",
                        "name": "Use",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Array of items to upload",
                        "name": "Query",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {}
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.SuccessDataResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/scraper/getCurrency": {
            "get": {
                "description": "Get fx rate from scraper by providing the url",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "scraper"
                ],
                "summary": "Get currency from scraper",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"user123\"",
                        "description": "User calling the API",
                        "name": "TaskUser",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.SuccessDataResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/scraper/getScrapedInfo": {
            "get": {
                "description": "Get data from scraper by providing the url and platform params",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "scraper"
                ],
                "summary": "Get data from scraper",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User calling the API",
                        "name": "TaskUser",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "URL source for scraping",
                        "name": "URL",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.SuccessScraperResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/scraper/getScrapedSale": {
            "post": {
                "description": "Get sale from scraper by providing the url and platform params",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "scraper"
                ],
                "summary": "Get sale from scraper",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"user123\"",
                        "description": "User calling the API",
                        "name": "TaskUser",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "URL sources for scraping",
                        "name": "URLS",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.SaleUrls"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.SuccessSaleResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Analytics": {
            "type": "object",
            "properties": {
                "90%_percent": {
                    "type": "number"
                },
                "90%_sale": {
                    "type": "number"
                },
                "95%_percent": {
                    "type": "number"
                },
                "95%_sale": {
                    "type": "number"
                },
                "date": {
                    "type": "string"
                },
                "latest_sale": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "percent": {
                    "type": "number"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string"
                },
                "error": {
                    "type": "string"
                }
            }
        },
        "models.Omnibus": {
            "type": "object",
            "properties": {
                "LastUpdated": {
                    "description": "Last Update on Info",
                    "type": "string"
                },
                "amazonurl": {
                    "description": "URL to Amazon",
                    "type": "string"
                },
                "imgpath": {
                    "description": "Path to the image file",
                    "type": "string"
                },
                "isturl": {
                    "description": "URL to IST",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the omnibus",
                    "type": "string"
                },
                "pagecount": {
                    "description": "Total number of pages",
                    "type": "integer"
                },
                "price": {
                    "description": "Price of the omnibus",
                    "type": "number"
                },
                "publisher": {
                    "description": "Publisher of the omnibus",
                    "type": "string"
                },
                "releaseddate": {
                    "description": "Creation date",
                    "type": "string"
                },
                "status": {
                    "description": "Hot , Cold , Archive",
                    "type": "string"
                },
                "upc": {
                    "description": "Universal Product Code",
                    "type": "string"
                },
                "version": {
                    "description": "Standard or DM version",
                    "type": "string"
                }
            }
        },
        "models.QuerySuccessResponse-models_Analytics": {
            "type": "object",
            "required": [
                "action",
                "values"
            ],
            "properties": {
                "action": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Analytics"
                    }
                }
            }
        },
        "models.QuerySuccessResponse-models_SaleUrls": {
            "type": "object",
            "required": [
                "action",
                "values"
            ],
            "properties": {
                "action": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.SaleUrls"
                    }
                }
            }
        },
        "models.QuerySuccessResponse-string": {
            "type": "object",
            "required": [
                "action",
                "values"
            ],
            "properties": {
                "action": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.Sale": {
            "type": "object",
            "properties": {
                "LastUpdated": {
                    "description": "Last Update on Sale",
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "percent": {
                    "description": "Sale percentage over the original price",
                    "type": "integer"
                },
                "platform": {
                    "description": "Platform name (e.g., IST, Amazon)",
                    "type": "string"
                },
                "sale": {
                    "description": "Daily sale price",
                    "type": "number"
                },
                "upc": {
                    "description": "Universal Product Code",
                    "type": "string"
                }
            }
        },
        "models.SaleUrls": {
            "type": "object",
            "properties": {
                "amazonurl": {
                    "description": "\"https://www.amazon.sg/Flash-Mark-Waid-Omnibus/dp/1779528418/\"",
                    "type": "string"
                },
                "isturl": {
                    "description": "\"https://www.instocktrades.com/products/jun247225/flash-by-mark-waid-omnibus-hc-vol-02\"",
                    "type": "string"
                },
                "upc": {
                    "type": "string"
                }
            }
        },
        "models.SuccessDataResponse": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string"
                },
                "inserted": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.SuccessResponse": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string"
                },
                "bucketname": {
                    "type": "string"
                },
                "objectname": {
                    "type": "string"
                }
            }
        },
        "models.SuccessSaleResponse": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Sale"
                    }
                }
            }
        },
        "models.SuccessScraperResponse": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Omnibus"
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}

basePath: /api/v1
definitions:
  models.Analytics:
    properties:
      date:
        type: string
      latest_sale:
        type: number
      name:
        type: string
      percent:
        type: number
      url:
        type: string
    type: object
  models.ErrorResponse:
    properties:
      action:
        type: string
      error:
        type: string
    type: object
  models.Omnibus:
    properties:
      LastUpdated:
        description: Last Update on Info
        type: string
      amazonurl:
        description: URL to Amazon
        type: string
      imgpath:
        description: Path to the image file
        type: string
      isturl:
        description: URL to IST
        type: string
      name:
        description: Name of the omnibus
        type: string
      pagecount:
        description: Total number of pages
        type: integer
      price:
        description: Price of the omnibus
        type: number
      publisher:
        description: Publisher of the omnibus
        type: string
      releaseddate:
        description: Creation date
        type: string
      status:
        description: Hot , Cold , Archive
        type: string
      upc:
        description: Universal Product Code
        type: string
      version:
        description: Standard or DM version
        type: string
    type: object
  models.QuerySuccessResponse-models_Analytics:
    properties:
      action:
        type: string
      values:
        items:
          $ref: '#/definitions/models.Analytics'
        type: array
    required:
    - action
    - values
    type: object
  models.QuerySuccessResponse-models_SaleUrls:
    properties:
      action:
        type: string
      values:
        items:
          $ref: '#/definitions/models.SaleUrls'
        type: array
    required:
    - action
    - values
    type: object
  models.QuerySuccessResponse-string:
    properties:
      action:
        type: string
      values:
        items:
          type: string
        type: array
    required:
    - action
    - values
    type: object
  models.Sale:
    properties:
      LastUpdated:
        description: Last Update on Sale
        type: string
      date:
        type: string
      percent:
        description: Sale percentage over the original price
        type: integer
      platform:
        description: Platform name (e.g., IST, Amazon)
        type: string
      sale:
        description: Daily sale price
        type: number
      upc:
        description: Universal Product Code
        type: string
    type: object
  models.SaleUrls:
    properties:
      amazonurl:
        description: '"https://www.amazon.sg/Flash-Mark-Waid-Omnibus/dp/1779528418/"'
        type: string
      isturl:
        description: '"https://www.instocktrades.com/products/jun247225/flash-by-mark-waid-omnibus-hc-vol-02"'
        type: string
      upc:
        type: string
    type: object
  models.SuccessDataResponse:
    properties:
      action:
        type: string
      inserted:
        items:
          type: string
        type: array
    type: object
  models.SuccessResponse:
    properties:
      action:
        type: string
      bucketname:
        type: string
      objectname:
        type: string
    type: object
  models.SuccessSaleResponse:
    properties:
      action:
        type: string
      data:
        items:
          $ref: '#/definitions/models.Sale'
        type: array
    type: object
  models.SuccessScraperResponse:
    properties:
      action:
        type: string
      data:
        items:
          $ref: '#/definitions/models.Omnibus'
        type: array
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact: {}
paths:
  /minio/deleteImage:
    delete:
      consumes:
      - application/json
      description: Get a file from MinIO storage
      parameters:
      - description: User calling api
        in: query
        name: TaskUser
        required: true
        type: string
      - description: The name of the minio bucket
        in: query
        name: BucketNameKey
        required: true
        type: string
      - description: The name of the object with extension in minio eg image.png
        in: query
        name: ObjectNameKey
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get a file from MinIO
      tags:
      - minio
  /minio/getImage:
    get:
      consumes:
      - application/json
      description: Get a file from MinIO storage
      parameters:
      - description: User calling api
        in: query
        name: TaskUser
        required: true
        type: string
      - description: The name of the minio bucket
        in: query
        name: BucketNameKey
        required: true
        type: string
      - description: The name of the object with extension in minio eg image.png
        in: query
        name: ObjectNameKey
        required: true
        type: string
      produces:
      - image/png
      - image/jpeg
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get a file from MinIO
      tags:
      - minio
  /minio/uploadImage:
    post:
      consumes:
      - image/png
      - image/jpeg
      description: Upload a file to MinIO storage
      parameters:
      - description: User calling api
        in: query
        name: TaskUser
        required: true
        type: string
      - description: File to be uploaded
        in: formData
        name: file
        required: true
        type: file
      - description: The name of the minio bucket
        in: query
        name: BucketNameKey
        required: true
        type: string
      - description: File extension (e.g., png, jpeg)
        in: formData
        name: extension
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Upload a file to MinIO
      tags:
      - minio
  /postgresql/getAnalytics:
    get:
      consumes:
      - application/json
      description: Return a table from the PostgreSQL database
      parameters:
      - description: User calling the API
        in: query
        name: TaskUser
        required: true
        type: string
      - description: the table to query
        in: query
        name: Table
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.QuerySuccessResponse-models_Analytics'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: get table
      tags:
      - postgres
  /postgresql/getInfoByDate:
    get:
      consumes:
      - application/json
      description: Return an array of upc from the PostgreSQL database filtered by
        date
      parameters:
      - description: User calling the API
        in: query
        name: TaskUser
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.QuerySuccessResponse-string'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: get data by date
      tags:
      - postgres
  /postgresql/getInfoByPublisher:
    get:
      consumes:
      - application/json
      description: Return an array of upc from the PostgreSQL database filtered by
        date
      parameters:
      - description: User calling the API
        in: query
        name: TaskUser
        required: true
        type: string
      - description: Publisher of item
        in: query
        name: Publisher
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.QuerySuccessResponse-models_SaleUrls'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: get data by date
      tags:
      - postgres
  /postgresql/uploadInfo:
    post:
      consumes:
      - application/json
      description: Upload an array of items (Omnibus) to the PostgreSQL database
      parameters:
      - description: User calling the API
        example: '"user123"'
        in: query
        name: TaskUser
        required: true
        type: string
      - description: use case
        example: ""
        in: query
        name: Use
        required: true
        type: string
      - description: Array of items to upload
        in: body
        name: Query
        required: true
        schema:
          items: {}
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessDataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Upload data to PostgreSQL
      tags:
      - postgres
  /scraper/getCurrency:
    get:
      consumes:
      - application/json
      description: Get fx rate from scraper by providing the url
      parameters:
      - description: User calling the API
        example: '"user123"'
        in: query
        name: TaskUser
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessDataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get currency from scraper
      tags:
      - scraper
  /scraper/getScrapedInfo:
    get:
      consumes:
      - application/json
      description: Get data from scraper by providing the url and platform params
      parameters:
      - description: User calling the API
        in: query
        name: TaskUser
        required: true
        type: string
      - description: URL source for scraping
        in: query
        name: URL
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessScraperResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get data from scraper
      tags:
      - scraper
  /scraper/getScrapedSale:
    post:
      consumes:
      - application/json
      description: Get sale from scraper by providing the url and platform params
      parameters:
      - description: User calling the API
        example: '"user123"'
        in: query
        name: TaskUser
        required: true
        type: string
      - description: URL sources for scraping
        in: body
        name: URLS
        required: true
        schema:
          items:
            $ref: '#/definitions/models.SaleUrls'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessSaleResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get sale from scraper
      tags:
      - scraper
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
